#!/usr/bin/env python3

import os
import time
import math
import yaml
import requests
import argparse
import subprocess

from gobusterSummarizer import gobuster_formatter
from pathlib import Path
from colorama import Fore, Back, Style

# Ridiculous, Obligatory Title
obligatory_title = '''
   ______                      __                ______                                      __            
  / ____/________  ___  ____ _/ /_____  _____   / ____/___  __  ______ ___  ___  _________ _/ /_____  _____
 / /   / ___/ __ \/ _ \/ __ `/ //_/ _ \/ ___/  / __/ / __ \/ / / / __ `__ \/ _ \/ ___/ __ `/ __/ __ \/ ___/
/ /___(__  ) /_/ /  __/ /_/ / ,< /  __(__  )  / /___/ / / / /_/ / / / / / /  __/ /  / /_/ / /_/ /_/ / /    
\____/____/ .___/\___/\__,_/_/|_|\___/____/  /_____/_/ /_/\__,_/_/ /_/ /_/\___/_/   \__,_/\__/\____/_/     
         /_/                                                                                               
'''

# User Configurations
suppression_list = ['masscan', 'dotdotpwn', ]  # List of tools that should use a suppression
suppression = ' >/dev/null 2>&1'  # Suppression standard postfix
disabled_cmd_dict = {  # <Tool>: <Reason_For_Disabled_State>
    'dotdotpwn': 'Disabled due to inability to grep output or control it without user intervention.',
    'masscan': 'Disabled due to runtime.',
    'nikto': 'Disabled due to OSCP requirements.',
}


def get_args():
    global obligatory_title
    print(obligatory_title)
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--ip', help='Target IP Address', default='BLANK', type=str, required=True)
    parser.add_argument('-rpc', '--rpc_port', help='Target RPC Port', default=111, type=int, required=False)
    parser.add_argument('-s', '--scan_type', help='Scan Speed: [`long` or `short`]', default='short', type=str,
                        required=False)
    parser.add_argument('-c', '--command_timeout', help='Command Timeout [Default = 30 Minutes]', default=3000,
                        type=int, required=False)
    parser.add_argument('-ftp', '--ftp_port', help='Target FTP Port', default=21, type=int, required=False)
    parser.add_argument('-ssh', '--ssh_port', help='Target SSH Port', default=22, type=int, required=False)
    parser.add_argument('-smtp', '--smtp_port', help='Target SMTP Port', default=25, type=int, required=False)
    parser.add_argument('-dns', '--dns_port', help='Target SSH Port', default=53, type=int, required=False)
    parser.add_argument('-pop', '--pop_port', help='Target POP Port', default=110, type=int, required=False)
    parser.add_argument('-smb', '--smb_port', help='Target SMB Port', default=139, type=int, required=False)
    parser.add_argument('-snmp', '--snmp_port', help='Target SNMP Port', default=161, type=int, required=False)
    parser.add_argument('-http', '--http_port', help='Target HTTP Port', default=80, type=int, required=False)
    parser.add_argument('-https', '--https_port', help='Target HTTPs Port', default=443, type=int, required=False)
    parser.add_argument('-nosudo', '--nosudo', help='Don\'t Initiate Sudo', action='store_true', default=False)
    parser.add_argument('-lowexec', '--initial_nmap_only', help='Only output command file after short nmap port scan',
                        action='store_true', default=False)
    return parser.parse_args()


# Global Variables
args = get_args()
ip = args.ip
script_path = '/'.join(os.path.abspath(__file__).split('/')[:-1])
wordlist_root = '/usr/share/wordlists'
output_root_dir = f"{os.getcwd()}/{ip}_results"
superuser = 'sudo '
port_list = []
cmd_timeout = args.command_timeout
scan_type = args.scan_type
rpc_port = args.rpc_port
http_port = args.http_port
https_port = args.https_port
ftp_port = args.ftp_port
ssh_port = args.ssh_port
smtp_port = args.smtp_port
dns_port = args.dns_port
pop_port = args.pop_port
smb_port = args.smb_port
snmp_port = args.snmp_port
socket_dict = {}
http_socket = f'http://{ip}:{http_port}'
http_filename = http_socket.replace('http://', '').replace('//', '').replace('/', '-')
https_socket = f'https://{ip}:{https_port}'
https_filename = https_socket.replace('https://', '').replace('//', '').replace('/', '-')
original_start_time = time.time()
current_process_time = time.time()
initial_ports = ''
command_sets_dict = {}
commands_attempted = []
formatted_command_msg_sent = False
commands_ignored = []
output_summary = []

# Service / Port Definitions
service_dict = {
    'initial': 'initial',
    'wordlist': 'wordlist',
    'all': 'all',
    f'{ftp_port}': 'ftp',
    f'{ssh_port}': 'ssh',
    f'{smtp_port}': 'smtp',
    f'{dns_port}': 'dns',
    f'{http_port}': 'http',
    f'{pop_port}': 'pop',
    f'{rpc_port}': 'rpc',
    f'{smb_port}': 'smb',
    f'{snmp_port}': 'snmp',
    f'{https_port}': 'https',
    '135': 'rpc',
    '445': 'smb',
    '1521': 'oracle',
    '3306': 'mysql',
}


# Command Sets
def generate_command_dict(output_to_file=True):
    global script_path, command_sets_dict
    with open(os.path.join(script_path, 'command_sets.yaml'), 'r') as file:
        command_sets_template = yaml.safe_load(file)

    command_sets_dict = {}

    for service, data in command_sets_template.items():
        command_sets_dict[service] = {'commands': {}}
        for cmd, scan_types in data['commands'].items():
            formatted_cmd = cmd.format(
                ip=ip,
                initial_ports=initial_ports,
                output_root_dir=output_root_dir,
                http_socket=http_socket,
                https_socket=https_socket,
                http_filename=http_filename,
                https_filename=https_filename,
                http_port=http_port,
                https_port=https_port,
                ftp_port=ftp_port,
                ssh_port=ssh_port,
                smtp_port=smtp_port,
                dns_port=dns_port,
                pop_port=pop_port,
                smb_port=smb_port,
                snmp_port=snmp_port,
                rpc_port=rpc_port,
                wordlist_root=wordlist_root,
                script_path=script_path,
                scan_type=scan_type
            )
            command_sets_dict[service]['commands'][formatted_cmd] = scan_types

    if output_to_file:
        write_all_commands(command_sets_dict, ip, output_root_dir, args)

    return command_sets_dict


def find_gobuster_files(directory_path):
    try:
        # Ensure the provided path is a valid directory
        if not os.path.isdir(directory_path):
            print_with_intention("[x] Invalid directory path. Please provide a valid directory.")
            return []

        gobuster_file_paths = []

        # Iterate through the files in the directory
        for filename in os.listdir(directory_path):
            # Check if the file starts with "gobuster_"
            if filename.startswith("gobuster_") and os.path.isfile(os.path.join(directory_path, filename)):
                # Get the directory path and add it to the list
                file_directory = os.path.join(directory_path, filename)
                gobuster_file_paths.append(file_directory)

        return gobuster_file_paths

    except Exception as e:
        print_with_intention("[x] An error occurred: {}".format(str(e)))
        return []


def update_file_content(file_path, new_content):
    """
    Open a file, erase all contents, paste new contents, and save it.

    :param file_path: The path to the file to be updated.
    :param new_content: The content to be written to the file.
    """
    try:
        with open(file_path, 'w') as file:
            file.write(new_content)

        print_with_intention("[i] File '{}' reformatted successfully.".format(file_path))

    except Exception as e:
        print_with_intention("[x] An error occurred: {}".format(str(e)))


def write_all_commands(command_sets_dict, ip, output_root_dir, args):
    global formatted_command_msg_sent
    all_cmds_out_file = os.path.join(output_root_dir, 'all_commands')
    if not formatted_command_msg_sent:
        print_with_intention(f'[i] Outputting All Formatted Commands to: {all_cmds_out_file}')
        formatted_command_msg_sent = True
    with open(all_cmds_out_file, 'w') as file_out:
        file_out.write(f'[+] All Command Options (COPY/PASTE)\n\n')
        for service, command_list in command_sets_dict.items():
            service_title = f'[-] Service: {service}'
            file_out.write(f'{"*"*len(service_title)}\n{service_title}\n{"*"*len(service_title)}\n\n')
            for _, commands in command_list.items():
                for command in commands:
                    file_out.write(f'{command}\n')
            file_out.write('\n')


def chmod(_path):
    try:
        os.chmod(_path, 0o0777)
    except Exception as e:
        print_with_intention(f'[!] Path CHMOD Failed: {_path}\n\tError: `{e}`')


def build_dir_tree(_path):
    if os.path.exists(_path):
        print_with_intention(f'[i] Results Path Already Exists: `{_path}`')
        return _path
    try:
        if _path[-1] == "/":
            Path(_path[:-1]).mkdir(parents=True)
        else:
            Path(_path).mkdir(parents=True)
        print_with_intention(f'[+] Results Path Created: `{_path}`')
        chmod(_path)

    except Exception as e:
        print_with_intention(f'[!] Path Creation Error Details: `{e}`')
        return _path
    return _path


def socket_updater(new_ip, new_port):
    global ip, http_port, https_port, http_socket, https_socket, command_sets_dict
    ip = new_ip
    http_port = new_port
    https_port = new_port
    http_socket = f'http://{ip}:{http_port}'
    https_socket = f'https://{ip}:{https_port}'

    # Regenerate command sets with updated sockets
    command_sets_dict = generate_command_dict()


def print_elapsed_time():
    global original_start_time
    seconds = round(int(time.time() - original_start_time), 2)
    minutes = math.trunc(seconds / 60)
    remaining_seconds = math.trunc(seconds - (minutes * 60))
    if len(str(remaining_seconds)) != 2:
        remaining_seconds = f'0{remaining_seconds}'
    elapsed_time = f'{minutes}:{remaining_seconds}'
    msg = f'[^] Total_Time Elapsed: `{elapsed_time}`'
    print_with_intention(msg)
    return time.time()


def http_response(_url):
    r = requests.head(_url, verify=False, timeout=5)
    content_type = f"{r.headers['content-type']}"
    return f"{r.status_code}", f"{content_type}"


def get_live_sockets(print_error=False):
    global ip, port_list, socket_dict, service_dict

    for port in port_list:
        potential_sockets = {f'http://{ip}:{port}': 'http', f'https://{ip}:{port}': 'https'}
        for potential_socket, _protocol in potential_sockets.items():
            try:
                socket_response = http_response(potential_socket)
                socket_dict[f'{potential_socket}'] = f'{port}'
                service_dict[f'{port}'] = f'{_protocol}'
                print_with_intention(f'[+] Socket `{potential_socket}` responded with a `{socket_response[0]}`.')
                print_with_intention(f'[^] Adding port `{port}` to the `{_protocol}` protocol/service.')

            except Exception as e:
                if print_error:
                    print_with_intention(f'[i] Socket `{potential_socket}` failed to respond. Skipping...')
                continue


def execute_os_command(_cmd, _print=True, _print_et=True):
    global args, suppression, suppression_list, disabled_cmd_dict, cmd_timeout, commands_attempted, commands_ignored

    if _cmd not in commands_attempted:
        commands_attempted.append(_cmd)

    for disabled_cmd, reason in disabled_cmd_dict.items():
        if disabled_cmd in _cmd:
            print_with_intention(f'[*] Command Disabled: `{_cmd}`')
            print_with_intention(f'[*] Reason: `{reason}`', tab=True)
            if _cmd not in commands_ignored:
                commands_ignored.append(_cmd)
            return None, None

    for flagged_cmd in suppression_list:
        if flagged_cmd in _cmd:
            _cmd = _cmd + suppression

    if _print:
        print_with_intention(f'[i] Attempting: `{_cmd}`')

    if not args.nosudo:
        _cmd = f'{superuser}{_cmd}'

    try:
        results = subprocess.run(_cmd, shell=True, timeout=cmd_timeout, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout = results.stdout.decode()
        stderr = results.stderr.decode()

        if results.returncode == 0 and not results.stderr:
            if stdout:
                print_with_intention(f'[^] {stdout}')
            print_with_intention(f'[+] Execution Completed Successfully!')
            if _print_et:
                print_elapsed_time()
            return stdout, None

        else:
            if not _cmd.lower().strip().startswith('gobuster') and not _cmd.lower().strip().startswith('sudo gobuster'):
                print_with_intention(f'[!] Execution Encountered an Error.')
            if stderr:
                print_with_intention(f'[x] Error Details: {stderr}')
            if _print_et:
                print_elapsed_time()
            return 'SystemExecutionError', results.stderr.decode()

    except subprocess.SubprocessError as e:
        print_with_intention(f'[!] System Execution Error: `{e}`')
        print_with_intention(f'[x] Exiting due to system error or permissions issue. Ensure you are running in a '
                             f'shell and not an IDE.')

    except Exception as e:
        print_with_intention(f'[!] General Execution Failure.')
        print_with_intention(f'[x] Error Details: {e}')

    if _print_et:
        print_elapsed_time()
    return None, None


def print_with_intention(_string, newline=True, tab=False):
    global output_summary
    new_line = "\n" if newline else " "
    _tab = "\t" if tab else " "

    # Informational Statement
    if _string.startswith("[i] "):
        print(_tab + Fore.WHITE + Back.BLUE + "[i]" + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + Fore.WHITE + Back.BLUE + _string[4:] + Back.RESET + Fore.RESET + new_line)
    # Declarative Statement
    elif _string.startswith("[+] "):
        print(_tab + Fore.BLACK + Back.GREEN + "[+]" + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + Fore.BLACK + Back.GREEN + _string[4:] + Fore.RESET + Back.RESET + new_line)
    # Addendum or Continuation
    elif _string.startswith("[^] "):
        print("\t" + Fore.BLACK + Back.CYAN + "[^]" + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + Fore.BLACK + Back.CYAN + _string[4:] + Fore.RESET + Back.RESET + new_line)
    # Error or Alert Notification
    elif _string.startswith("[!] "):
        print(_tab + Fore.WHITE + Back.RED + "[!]" + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + Fore.WHITE + Back.RED + _string[4:] + Fore.RESET + Back.RESET + new_line)
    # Error Details or Configuration Alert
    elif _string.startswith("[*] "):
        print(_tab + "\t" + Fore.RED + Back.YELLOW + "[*]" + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + Fore.RED + Back.YELLOW + _string[4:] + Fore.RESET + Back.RESET + new_line)
    # System Errors
    elif _string.startswith("[x] ") or _string.startswith("[X] "):
        print(_tab + "\t\t" + Fore.YELLOW + Back.RED + "[x]" + Back.RESET + Fore.RESET + " " +
              Style.RESET_ALL + Fore.YELLOW + Back.RED + _string[4:] + Fore.RESET + Back.RESET + new_line)

    output_summary.append(_string)


def test_protocol(port_str):
    global service_dict, suppression_list, scan_type, disabled_cmd_dict, ip
    result = False

    try:
        protocol = f'{service_dict[port_str]}'

        if protocol.lower() in ['http', 'https']:
            socket_updater(ip, port_str)
            print_with_intention(f'[^] Updated the socket to `{port_str}`')

        command_sets = generate_command_dict()

        try:
            tool_set = set(tool.split(" ")[0] for tool in command_sets[protocol]['commands'])
            try:
                cmd_dict = command_sets[protocol]['commands']
                all_tools = ", ".join(tool_set) if len(tool_set) > 1 else next(iter(tool_set))
                tools = [item for item in all_tools.split(', ') if item not in disabled_cmd_dict]
                print_with_intention(f'[i] Detected Port & Protocol: ({port_str.upper()}/{protocol.upper()})')
                print_with_intention(f'[^] Testing port with Tools: `{tools}`')
                for cmd, cmd_scan_type in cmd_dict.items():
                    if scan_type.upper() in cmd_scan_type:
                        try:
                            result = True
                            execute_os_command(cmd)
                        except Exception as e:
                            result = False
                            print_with_intention(f'[!] Command set failure for protocol: `{protocol.upper()}`')
                            print_with_intention(f'[x] Error: `{e}`')
                    else:
                        print_with_intention(f'[^] Command not in `{scan_type.upper()}` scan type, but is still '
                                             f'a manual option (COPY/PASTE):')
                        print(f'\t{cmd}\n')
            except Exception as e:
                print_with_intention(f'[!] No command set defined for protocol `{protocol.upper()}`')
                print_with_intention(f'Error: `{e}`')
        except Exception as e:
            print_with_intention(f'[!] No command set defined for port `{port_str}`')
            print_with_intention(f'Error: `{e}`')
    except Exception as e:
        print_with_intention(f'[!] No port service defined in service_dict for `{port_str}`')
        print_with_intention(f'Error: `{e}`')
    return result


def build_output_structure():
    global output_root_dir
    _dirs = [output_root_dir,
             f"{'/'.join(output_root_dir.split('/')[:-1])}/artifacts",
             f"{'/'.join(output_root_dir.split('/')[:-1])}/exploits"]
    for _dir in _dirs:
        if not os.path.exists(_dir):
            try:
                build_dir_tree(_dir)
            except:
                pass


def main():
    global ip, output_summary, port_list, output_root_dir, socket_dict, initial_ports, commands_attempted, \
        commands_ignored, args

    # Begin testing on all components.
    print_with_intention(f'[+] TARGET: `{ip}`')
    print_with_intention(f'[i] Performing Initial Port Discovery. Please wait up to 5 minutes...')
    initial_ports = execute_os_command(f"nmap -p- --min-rate=1000 -T4 {ip} "
                                       f"| grep '^[0-9]' "
                                       f"| cut -d '/' -f 1 "
                                       f"| tr '\n' ',' "
                                       f"| sed s/,$//",
                                       _print=False, _print_et=False)[0]

    build_output_structure()
    generate_command_dict()
    if args.initial_nmap_only:
        print(f'[+] Initial light port scan completed.\n'
              f'\tCommands file created: `{os.path.join(output_root_dir, "all_commands")}`\n\tExiting...')
        exit(0)

    port_list = [x.strip() for x in initial_ports.split(",") if x.strip()]

    test_protocol('initial')
    test_protocol('all')

    # Test each identified socket.
    get_live_sockets()
    if socket_dict:
        for _, _port in socket_dict.items():
            test_protocol(f'{_port}')

    for _port in port_list:
        if _port in service_dict:
            if service_dict[_port] not in ['http', 'https']:
                test_protocol(_port)

    # Write the output to the summary file for this run.
    f_out = open(f'{output_root_dir}/summary_{ip}', 'w')
    for summary_line in output_summary:
        f_out.write(f'{summary_line}\n')
    f_out.close()

    for gobuster_path in find_gobuster_files(output_root_dir):
        output = gobuster_formatter(gobuster_path)
        update_file_content(gobuster_path, output)

    with open(os.path.join(output_root_dir, 'commands_attempted'), 'w') as file_in:
        file_in.write(f'[+] All Commands Attempted:\n\n')
        for attempted_command in commands_attempted:
            file_in.write(f'{attempted_command}\n\n')

    with open(os.path.join(output_root_dir, 'commands_ignored'), 'w') as file_in:
        file_in.write(f'[+] All Commands Skipped/Ignored:\n\n')
        for ignored_command in commands_ignored:
            file_in.write(f'{ignored_command}\n\n')


if __name__ == '__main__':
    main()
